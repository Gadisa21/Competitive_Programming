class UnionFind:

    def __init__(self,n):
        self.parent={i:i for i in range(n)}
        self.rank=[0]*n

    def find(self,x):

        if x==self.parent[x]:
            return x
        self.parent[x]=self.find(self.parent[x])
        return self.parent[x]

    def union(self,x,y):
        parentX=self.find(x)
        parentY=self.find(y)

        if parentX!=parentY:
            if self.rank[parentX]>self.rank[parentY]:
                self.parent[parentY]=parentX
            elif self.rank[parentX]<self.rank[parentY]:
                self.parent[parentX]=parentY
            else:
                self.parent[parentX]=parentY
                self.rank[parentY]+=1


class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        n=len(graph)
        uf=UnionFind(n)

        for i in range(n):
            for j in range(n):
                if graph[i][j]==1:
                    uf.union(i,j)

        component_size=[0]*n
        infected_component=[0]*n

        for i in range(n):
            root=uf.find(i)
            component_size[root]+=1
        for node in initial:
            root=uf.find(node)
            infected_component[root]+=1
        
        max_saved=0
        base_node=min(initial)

        for node in initial:
            root=uf.find(node)

            if infected_component[root]==1:
                if component_size[root]>max_saved:
                    max_saved=component_size[root]
                    base_node=node
                elif component_size[root]==max_saved and base_node>node:
                    base_node=node
        
        return base_node

        